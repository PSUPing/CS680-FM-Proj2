MODULE sender(ack, message)
VAR
  state   : {sending,sent};
  control : boolean;
ASSIGN
  init(state) := sending;
  next(state) := 
    case
      ack = control & !(state = sent) : sent;
      TRUE                            : sending;
    esac;
  next(control) :=
    case
      state = sent : !control;
      TRUE         : control;
    esac;
FAIRNESS running
LTLSPEC G F (state = sent)

MODULE receiver(message, control)
VAR
  state    : {receiving,received};
  ack      : boolean;
  expected : boolean;
ASSIGN
  init(state) := receiving;
  next(state) := 
    case
      control = expected & !(state = received) : received;
      TRUE                                     : receiving;
    esac;
  next(ack) :=
    case
      state = received : control;
      TRUE             : ack;
    esac;
  next(expected) :=
    case
      state = received : !expected;
      TRUE             : expected;
    esac;
FAIRNESS running
LTLSPEC G F (state = received)

MODULE one-bit-channel(input)
VAR
  forget : boolean;
  output : boolean;
ASSIGN
  next(output) := 
    case
      forget : output;
      TRUE   : input; 
    esac;
FAIRNESS running
FAIRNESS input & !forget
FAIRNESS !input & !forget

MODULE two-bit-channel(input1, input2)
VAR
  forget  : boolean;
  output1 : boolean;
  output2 : boolean;
ASSIGN
  next(output1) := 
    case
      forget : output1;
      TRUE   : input1;
    esac;
  next(output2) := 
    case
      forget : output2;
      TRUE   : input2;
    esac;
FAIRNESS running
FAIRNESS input1 & !forget
FAIRNESS !input1 & !forget
FAIRNESS input2 & !forget
FAIRNESS !input2 & !forget

MODULE bankmodel(acct_amt, oper_amt)
VAR
  acct_oper : {deposit,withdrawl,inquiry};
ASSIGN
  next(acct_oper) :=
    case
      deposit   : (oper_amt > 0) & ((acct_amt + oper_amt) > -1);
      withdrawl : (oper_amt > 0) & ((acct_amt - oper_amt) > -1);
      inquiry   : (acct_amt > -1);
    esac;

MODULE main
VAR
  bank        : bankmodel(1500, 100);
  send        : process sender(ack_channel.output, bank);
  recv        : process receiver(msg_channel.output1, msg_channel.output2);
  msg_channel : process two-bit-channel(bank, send.control);
  ack_channel : process one-bit-channel(recv.ack);
ASSIGN
  init(bank.acct_oper)      := deposit;
  init(send.control)        := FALSE;
  init(recv.expected)       := FALSE;
  init(recv.ack)            := TRUE;
  init(msg_channel.output2) := TRUE;
  init(ack_channel.output)  := TRUE;
LTLSPEC  G (send.state = sent & send.message = TRUE -> msg_channel.output1 = TRUE)